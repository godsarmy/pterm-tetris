name: Release

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    name: Build release binaries
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Exclude unsupported platforms
          - goos: darwin
            goarch: arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.22'

      - name: Build binary
        run: |
          # Set the binary name based on OS
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="tetris.exe"
          else
            BINARY_NAME="tetris"
          fi

          # Build the binary
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 \
            go build -o "${BINARY_NAME}" -ldflags="-s -w" ./cmd/tetris/

          # Create the archive name
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ARCHIVE_NAME="pterm-tetris_${{ github.ref_name }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip"
            zip "${ARCHIVE_NAME}" "${BINARY_NAME}"
          else
            ARCHIVE_NAME="pterm-tetris_${{ github.ref_name }}_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz"
            tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}"
          fi

          # Save the archive name for later use
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream
